C51 COMPILER V9.60.0.0   UART                                                              09/21/2022 09:17:30 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE uart.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\uart
                    -.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          /* ********************************************************************
   2          FILE                 : uart.c
   3          
   4          PURPOSE              : 
   5             
   6          AUTHOR               : K.M. Arun Kumar alias Arunkumar Murugeswaran
   7             
   8          KNOWN BUGS           : 
   9          
  10          NOTE                 :                
  11          
  12          CHANGE LOGS          :
  13          
  14          *****************************************************************************/
  15          
  16          #include "main.h"
  17          
  18          // ------  data type declarations ---------------------------
  19          
  20          // ------  function prototypes ------------------------------
  21          static unsigned int UART_Rx_Char_Proc();
  22          
  23          // ------  constants ----------------------------------------
  24          
  25          
  26          // ------  variables ----------------------------------------
  27          uart_data_t uart_data;
  28          
  29          
  30          /*------------------------------------------------------------*-
  31          FUNCTION NAME  : UART_Init
  32          
  33          DESCRIPTION    : Initialize UART port            
  34          
  35          INPUT          : 
  36          
  37          OUTPUT         : 
  38          
  39          NOTE           : 
  40          -*------------------------------------------------------------*/
  41          void UART_Init(void)
  42          {
  43   1        #ifdef UART_EVENT == INTERRUPT
*** WARNING C323 IN LINE 43 OF uart.c: newline expected, extra characters found
  44   1          Global_Interrupt_Enable();
  45   1          ES = 1; //serial Interrupt_Enable
  46   1        #endif
  47   1        
  48   1        SCON = 0x50;    // setup serial port control 
  49   1          TMOD = 0x20;    // hardware (9600 BAUD @11.0592MHZ) 
  50   1          TH1  = 0xFD;    // TH1
  51   1          TR1  = 1;     // Timer 1 on
  52   1        
  53   1        UART_Reset_Datas(UART_RESET_ALL_DATAS); 
C51 COMPILER V9.60.0.0   UART                                                              09/21/2022 09:17:30 PAGE 2   

  54   1        Delay_in_Milli_Sec(1);  
  55   1        return;
  56   1      }
  57          
  58          /*------------------------------------------------------------*-
  59          FUNCTION NAME  : UART_Reset_Datas
  60          
  61          DESCRIPTION    :           
  62          
  63          INPUT          : 
  64          
  65          OUTPUT         : 
  66          
  67          NOTE           : 
  68          -*------------------------------------------------------------*/
  69          unsigned int UART_Reset_Datas(const unsigned char uart_reset_type)
  70          {
  71   1        switch(uart_reset_type)
  72   1        {
  73   2          case UART_RESET_ALL_DATAS:
  74   2          case UART_RESET_ALL_RCVD_DATAS:
  75   2              uart_data.rcvd_ready_flag = STATE_YES;         
  76   2              uart_data.echo_rcvd_data_flag = STATE_YES;
  77   2          case UART_RESET_READ_DATA:
  78   2              uart_data.read_flag = STATE_YES;  
  79   2          case UART_RESET_RCVD_BUFFER:    
  80   2                Str_Fill_Char(uart_data.rcvd_str, STR_MAX_NUM_CHARS ,NULL_CHAR); 
  81   2                uart_data.rcvd_str_num_chars = 0;
  82   2              uart_data.rcvd_overflow_flag = STATE_NO;
  83   2              uart_data.rcvd_char = NULL_CHAR;
  84   2              uart_data.rcvd_terminator_char_flag = STATE_NO;      
  85   2          if(uart_reset_type != UART_RESET_ALL_DATAS)
  86   2              break;
  87   2          case UART_RESET_ALL_TX_DATAS:
  88   2                  uart_data.tx_ready_flag = STATE_YES;
  89   2          break;
  90   2              default:
  91   2                 return ERR_DATA_NOT_IN_RANGE;    
  92   2        }
  93   1        return SUCCESS;
  94   1      }
  95          /*------------------------------------------------------------*-
  96          FUNCTION NAME  : UART_Tx_Char
  97          
  98          DESCRIPTION    : Transmit Char by polling          
  99          
 100          INPUT          : 
 101          
 102          OUTPUT         : 
 103          
 104          NOTE           : 
 105          -*------------------------------------------------------------*/
 106          unsigned int UART_Tx_Char(const char tx_char)
 107          {
 108   1        if(uart_data.tx_ready_flag == STATE_YES)
 109   1        {
 110   2          SBUF = tx_char;
 111   2          uart_data.tx_ready_flag = STATE_NO; 
 112   2              if(UART_EVENT == POLLING)
 113   2          {     
 114   3                 while (TI==0); //Transmit Char by polling 
 115   3                 TI = 0;
C51 COMPILER V9.60.0.0   UART                                                              09/21/2022 09:17:30 PAGE 3   

 116   3               uart_data.tx_ready_flag = STATE_YES; 
 117   3          }
 118   2          return SUCCESS; 
 119   2        }   
 120   1        return ERR_UART_TX_NOT_READY; 
 121   1      }
 122          
 123          /*------------------------------------------------------------*-
 124          FUNCTION NAME  : UART_Tx_Str
 125          
 126          DESCRIPTION    : Transmit String by polling          
 127          
 128          INPUT          : 
 129          
 130          OUTPUT         : 
 131          
 132          NOTE           : 
 133          -*------------------------------------------------------------*/
 134          unsigned int UART_Tx_Str(const char *const tx_str)
 135          {
 136   1           unsigned char index;
 137   1         
 138   1           for(index = 0; ((*(tx_str + index)) != NULL_CHAR); index++)
 139   1         {
 140   2            if(((UART_Tx_Char(*(tx_str + index))) != SUCCESS))
 141   2                return ERR_UART_TX_NOT_READY;    
 142   2         }
 143   1         return SUCCESS; 
 144   1      }
 145          
 146          #ifdef UART_EVENT == INTERRUPT
*** WARNING C323 IN LINE 146 OF uart.c: newline expected, extra characters found
 147          /*------------------------------------------------------------*-
 148          FUNCTION NAME  : Serial_ISR 
 149          
 150          DESCRIPTION    : UART by Interrupt         
 151          
 152          INPUT          : 
 153          
 154          OUTPUT         : 
 155          
 156          NOTE           : 
 157          -*------------------------------------------------------------*/
 158          void Serial_ISR(void) interrupt 4
 159          {
 160   1        if(TI == 1)
 161   1        {
 162   2            TI = 0;           //clear uart transmit flag
 163   2            uart_data.tx_ready_flag = STATE_YES; 
 164   2        }
 165   1        if(RI == 1)
 166   1        {
 167   2          uart_data.rcvd_ready_flag = STATE_NO; 
 168   2          uart_data.rcvd_char = SBUF; 
 169   2          UART_Rx_Char_Proc();    
 170   2          RI = 0; //clear uart receive flag   
 171   2        }
 172   1      } 
 173          
 174          #else
              /*------------------------------------------------------------*-
              FUNCTION NAME  : UART_Rx_Char
C51 COMPILER V9.60.0.0   UART                                                              09/21/2022 09:17:30 PAGE 4   

              
              DESCRIPTION    : Receive Char by polling         
              
              INPUT          : 
              
              OUTPUT         : 
              
              NOTE           : 
              -*------------------------------------------------------------*/
              char UART_Rx_Char()
              {
                if(uart_data.rcvd_str_num_chars + 1 >= STR_MAX_NUM_CHARS )
                {
                  uart_data.rcvd_overflow_flag = STATE_YES;
                  return NULL_CHAR;
                }
                uart_data.rcvd_overflow_flag = STATE_NO;
                if(uart_data.rcvd_ready_flag == STATE_YES ) 
                {
                    uart_data.rcvd_ready_flag = STATE_NO; 
                      while (RI==0);
                      uart_data.rcvd_char = SBUF;
                    UART_Rx_Char_Proc();
                    RI = 0;   
                  return(uart_data.rcvd_char);    
                }
                return NULL_CHAR;   
              }
              #endif
 206          
 207          /*------------------------------------------------------------*-
 208          FUNCTION NAME  :  
 209          
 210          DESCRIPTION    :         
 211          
 212          INPUT          : 
 213          
 214          OUTPUT         : 
 215          
 216          NOTE           : 
 217          -*------------------------------------------------------------*/
 218          unsigned int UART_Read(const char **const read_str_ptr, const unsigned char *read_num_chars_ptr)
 219          {
 220   1        if(read_str_ptr == NULL_PTR || read_num_chars_ptr == NULL_PTR)
 221   1        {
 222   2          UART_Tx_Str("ERR: UART tead null ptr \r");
 223   2          return ERR_NULL_PTR;
 224   2        }
 225   1        *read_str_ptr = uart_data.rcvd_str;
 226   1        read_num_chars_ptr = &uart_data.rcvd_str_num_chars; 
 227   1          
 228   1        return SUCCESS;
 229   1      }
 230          /*------------------------------------------------------------*-
 231          FUNCTION NAME  :  UART_Rx_Char_Proc
 232          
 233          DESCRIPTION    :         
 234          
 235          INPUT          : 
 236          
 237          OUTPUT         : 
 238          
C51 COMPILER V9.60.0.0   UART                                                              09/21/2022 09:17:30 PAGE 5   

 239          NOTE           : 
 240          -*------------------------------------------------------------*/
 241          static unsigned int UART_Rx_Char_Proc()
 242          {
 243   1        uart_data.read_flag = STATE_NO;
 244   1        if(uart_data.rcvd_str_num_chars + 1 < STR_MAX_NUM_CHARS)
 245   1        {
 246   2           uart_data.rcvd_overflow_flag = STATE_NO;
 247   2               switch(uart_data.rcvd_char)
 248   2           {
 249   3                    case BACKSPACE_CHAR:
 250   3                   if(uart_data.rcvd_str_num_chars > 0)
 251   3                 {
 252   4                    if(uart_data.echo_rcvd_data_flag == STATE_YES)
 253   4                         if(((UART_Tx_Char(uart_data.rcvd_char)) != SUCCESS))
 254   4                     return ERR_UART_TX_NOT_READY;
 255   4                     uart_data.rcvd_str[uart_data.rcvd_str_num_chars--] = NULL_CHAR;
 256   4                 }
 257   3              break;
 258   3                    case TERMINATOR_CHAR:
 259   3                 if(uart_data.echo_rcvd_data_flag == STATE_YES)
 260   3                    if(((UART_Tx_Char(uart_data.rcvd_char)) != SUCCESS))
 261   3                    return ERR_UART_TX_NOT_READY; 
 262   3                       uart_data.rcvd_terminator_char_flag = STATE_YES;
 263   3                    break;
 264   3                    default:
 265   3                if(uart_data.echo_rcvd_data_flag == STATE_YES)
 266   3                     if(((UART_Tx_Char(uart_data.rcvd_char)) != SUCCESS))
 267   3                    return ERR_UART_TX_NOT_READY; 
 268   3                uart_data.rcvd_terminator_char_flag = STATE_NO; 
 269   3                  uart_data.rcvd_str[uart_data.rcvd_str_num_chars++] = uart_data.rcvd_char;
 270   3           }
 271   2           uart_data.rcvd_ready_flag = STATE_YES;
 272   2        }
 273   1        else
 274   1        {
 275   2              uart_data.rcvd_overflow_flag = STATE_YES;
 276   2          return ERR_UART_RX_OVERFLOW;
 277   2        }
 278   1        return SUCCESS;      
 279   1      }
 280          
 281          /*------------------------------------------------------------*
 282          FUNCTION NAME  : UART_Tx_Num
 283          
 284          DESCRIPTION    :
 285                          
 286          INPUT          : 
 287          
 288          OUTPUT         : 
 289          
 290          NOTE           : 
 291          
 292          Func ID        :   
 293          -*------------------------------------------------------------*/
 294           unsigned int UART_Tx_Num(const disp_format_t uart_disp_data)
 295          {
 296   1          unsigned int tens_thousand_digit,thousands_digit, hundreds_digit,tens_digit, unit_digit;
 297   1        unsigned long disp_num, num ;
 298   1        char num_data[] ={'0','1','2','3','4','5','6','7','8','9'};  
 299   1        char hex_data[] ={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}; 
 300   1          
C51 COMPILER V9.60.0.0   UART                                                              09/21/2022 09:17:30 PAGE 6   

 301   1        if(uart_disp_data.disp_sign  == STATE_YES) //signed lcd_datanum_disp_format
 302   1        {
 303   2          if(uart_disp_data.disp_data < 0 )
 304   2          {
 305   3            UART_Tx_Char('-');
 306   3            disp_num = -uart_disp_data.disp_data;
 307   3          }
 308   2              else
 309   2          {
 310   3            UART_Tx_Char('+');
 311   3            disp_num = uart_disp_data.disp_data;
 312   3          }        
 313   2        }
 314   1        else
 315   1        {
 316   2            disp_num = uart_disp_data.disp_data; 
 317   2        }
 318   1        num =  disp_num ;
 319   1        
 320   1          switch(uart_disp_data.num_digits_format)
 321   1        {
 322   2          case DISP_NUM_DIGIT5:
 323   2            num =  disp_num ;
 324   2            tens_thousand_digit = (unsigned int)(num / (unsigned long)(10000UL));
 325   2                UART_Tx_Char(num_data[tens_thousand_digit]);
 326   2          case DISP_NUM_DIGIT4:
 327   2              num = disp_num % 10000UL;
 328   2              thousands_digit = (unsigned int)(num / (unsigned long)(1000UL));
 329   2              UART_Tx_Char(num_data[thousands_digit]); 
 330   2          case DISP_NUM_DIGIT3:
 331   2              num = disp_num % 1000UL;
 332   2              hundreds_digit = (unsigned int) (num / (unsigned long) (100));
 333   2              UART_Tx_Char(num_data[hundreds_digit]);
 334   2          case DISP_NUM_DIGIT2:
 335   2              num = disp_num % 100;
 336   2                tens_digit = (unsigned int) (num / 10);
 337   2                UART_Tx_Char (num_data[tens_digit]);      
 338   2          case DISP_NUM_DIGIT1:
 339   2              unit_digit = (unsigned int) (disp_num % 10);
 340   2                UART_Tx_Char(num_data[unit_digit]); 
 341   2          break;
 342   2          case DISP_HEX_DIGIT4:
 343   2              //  ( 16 * 16 * 16 *16 )  = 0 as divide by zero warning 
 344   2              //num = disp_num % ( 16 * 16 * 16 *16 );
 345   2                thousands_digit = (num / (unsigned long) (16 * 16 * 16));
 346   2              UART_Tx_Char(hex_data[thousands_digit]);
 347   2          case DISP_HEX_DIGIT3:
 348   2              num = disp_num %(unsigned long)(16 * 16 * 16);
 349   2              hundreds_digit = (unsigned int) (num / (unsigned long) (16 * 16));
 350   2              UART_Tx_Char(hex_data[hundreds_digit]);
 351   2          case DISP_HEX_DIGIT2:
 352   2              num = disp_num %(unsigned long)(16 * 16);
 353   2                tens_digit = (unsigned int) (num / 16);
 354   2                UART_Tx_Char(hex_data[tens_digit]);
 355   2          case DISP_HEX_DIGIT1: 
 356   2              unit_digit = (unsigned int) (disp_num % 16);
 357   2                UART_Tx_Char(hex_data[unit_digit]);    
 358   2          break;
 359   2          default:
 360   2             return ERR_DATA_NOT_IN_RANGE;    
 361   2        } 
 362   1          return SUCCESS;     
C51 COMPILER V9.60.0.0   UART                                                              09/21/2022 09:17:30 PAGE 7   

 363   1      }
 364               
 365          /*-------------------------------------------------------------------
 366            ------------------------ END OF FILE ------------------------------
 367          -------------------------------------------------------------------*/
 368          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    981    ----
   CONSTANT SIZE    =     52    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24      58
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
